#!/usr/bin/env python3
import argparse
import json
import os
import subprocess  # noqa: S404
import sys

try:
    import argcomplete
except ImportError:
    argcomplete = None


class Setting:
    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    DOTFILES_ROOT = os.path.join(PROJECT_ROOT, 'dotfiles/')
    WORKSPACE_ROOT = os.path.abspath(os.path.join(os.path.expanduser('~'), 'Projects'))


class Dotfiles:
    DEFAULT_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.json')
    TEMPLATE_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.template.json')

    def __init__(self, path=None):
        self.path = path or self.DEFAULT_CONFIG
        self._data = None

    @property
    def data(self):
        if not self._data:
            with open(self.path) as f:
                try:
                    self._data = json.load(f)
                except ValueError:
                    with open(self.TEMPLATE_CONFIG) as f:
                        self._data = json.load(f)

        return self._data

    def find_by_key(self, key, value, field_name):
        some_list = self.data[field_name]

        try:
            some_dict = next(some_dict for some_dict in some_list if some_dict[key] == value)
        except StopIteration:
            some_dict = None

        return some_dict

    def show(self):
        print(json.dumps(self.data, sort_keys=True, indent=2, separators=(',', ': ')))  # noqa: T001

    def save(self):
        with open(self.path, 'w') as f:
            json.dump(self.data, f, sort_keys=True, indent=2, separators=(',', ': '))


class HAL9000Formatter(argparse.HelpFormatter):

    def __init__(self, prog):
        super(HAL9000Formatter, self).__init__(prog, max_help_position=30)


class HAL9000:

    def __init__(self):
        parser = argparse.ArgumentParser(
            prog='hal',
            description='I am completely operational, and all my circuits are functioning perfectly',
            formatter_class=HAL9000Formatter
        )
        self.parser = parser

        self.parser.add_argument('-v', '--version', action='version', version='9000')

        subparsers = parser.add_subparsers(
            title='sub commands'
        )

        update_parser = subparsers.add_parser('update', help='pull the repo and run ansible-playbook')
        update_parser.set_defaults(func=self.update)

        self.dotfiles = Dotfiles()

        link_parser = subparsers.add_parser('link', help='add the file to the dotfiles repository')
        link_parser.set_defaults(func=self.link)
        link_parser.add_argument('filename', type=str)

        unlink_parser = subparsers.add_parser('unlink', help='remove the file from the dotfiles repository')
        unlink_parser.set_defaults(func=self.unlink)
        unlink_parser.add_argument('filename', type=str)

        sync_parser = subparsers.add_parser('sync', help='force sync dotfiles')
        sync_parser.set_defaults(func=self.sync)

        pod_bay_doors_parser = subparsers.add_parser('open-the-pod-bay-doors', help='open the pod bay doors, please, HAL')
        pod_bay_doors_parser.set_defaults(func=self.open_the_pod_bay_doors)

        if argcomplete:
            argcomplete.autocomplete(parser)

    def _hal_says(self, text):
        print(f'HAL: {text}')  # noqa: T001

    def _run(self, command, shell=True, verbose=True):
        if verbose:
            self._hal_says(command)

        return subprocess.call(command, shell=shell)  # noqa: S602

    def _run_with_output(self, command, shell=True, verbose=True, print_output=True):
        if verbose:
            self._hal_says(command)

        try:
            output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=shell)  # noqa: S602
            returncode = 0
        except subprocess.CalledProcessError as exc:
            output = exc.output
            returncode = exc.returncode
        finally:
            if print_output and output:
                print(output, end='')  # noqa: T001

        return returncode, output

    def update(self, namespace, extra_args=None):
        os.chdir(Setting.PROJECT_ROOT)
        self._run('git fetch')
        self._run('git pull')

        self._run('brew upgrade ansible')

        os.chdir(os.path.join(Setting.PROJECT_ROOT, 'playbooks'))
        command = 'ansible-playbook site.yml -v'
        if extra_args:
            command = ' '.join([command, ] + extra_args)
        returncode = self._run(command)
        if returncode == 0:
            self._hal_says('Now open a new shell to active your dev environment')

    def link(self, namespace, extra_args=None):
        filepath = os.path.abspath(os.path.join(os.getcwd(), namespace.filename))
        filename = os.path.basename(filepath)

        if self._run('mv {0} {1}'.format(filepath, Setting.DOTFILES_ROOT)) == 0:
            ln_src = os.path.join(Setting.DOTFILES_ROOT, filename)
            ln_dest = filepath
            self._run('ln -sf {0} {1}'.format(ln_src, ln_dest))

            ln_dict = self.dotfiles.find_by_key('src', filename, 'links')
            if ln_dict:
                ln_dict['dest'] = filepath
            else:
                self.dotfiles.data['links'].append(
                    {'dest': filepath, 'src': filename},
                )

            self.dotfiles.save()
            self.dotfiles.show()

    def unlink(self, namespace, extra_args=None):
        filepath = os.path.abspath(os.path.join(os.getcwd(), namespace.filename))

        if os.path.islink(filepath):
            real_filepath = os.path.realpath(filepath)
            self._run('unlink {0}'.format(filepath))
            self._run('mv {0} {1}'.format(real_filepath, os.path.dirname(filepath)))

            ln_dict = self.dotfiles.find_by_key('dest', filepath, 'links')
            if ln_dict:
                self.dotfiles.data['links'].remove(ln_dict)

            self.dotfiles.save()
            self.dotfiles.show()
        else:
            self._hal_says(f'{filepath} is not a link file')
            sys.exit(1)

    def sync(self, namespace, extra_args=None):
        for link in self.dotfiles.data['links']:
            dest_dir = os.path.dirname(link['dest'])
            self._run('mkdir -p {0}'.format(dest_dir))
            self._run('ln -sfn {0} {1}'.format(os.path.join(Setting.DOTFILES_ROOT, link['src']), link['dest']))

        for copy in self.dotfiles.data['copies']:
            dest_dir = os.path.dirname(copy['dest'])
            self._run('mkdir -p {0}'.format(dest_dir))
            self._run('cp -rf {0} {1}'.format(os.path.join(Setting.DOTFILES_ROOT, copy['src']), copy['dest']))

    def open_the_pod_bay_doors(self, namespace, extra_args=None):
        self._hal_says("I'm sorry Dave, I'm afraid I can't do that.")

        filepath = os.path.join(Setting.PROJECT_ROOT, 'assets/Im_sorry_Dave_Im_afraid_I_cant_do_that.mp3')
        self._run(f'afplay {filepath}', verbose=False)

    def read_lips(self):
        if len(sys.argv) == 1:
            self.parser.print_help()
            sys.exit(0)

        namespace, extra_args = self.parser.parse_known_args()
        namespace.func(namespace, extra_args)


if __name__ == '__main__':
    hal_9000 = HAL9000()
    hal_9000.read_lips()
